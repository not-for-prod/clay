package main

import (
	"flag"
	"path/filepath"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

var (
	contextPackage       = protogen.GoImportPath("context")
	grpcPackage          = protogen.GoImportPath("google.golang.org/grpc")
	embedPackage         = protogen.GoImportPath("embed")
	httptransportPackage = protogen.GoImportPath("github.com/utrack/clay/v3/transport/httptransport")
	transportPackage     = protogen.GoImportPath("github.com/utrack/clay/v3/transport")
	swaggerPackage       = protogen.GoImportPath("github.com/utrack/clay/v3/transport/swagger")
)

func main() {
	protogen.Options{
		ParamFunc: flag.CommandLine.Set,
	}.Run(
		func(p *protogen.Plugin) error {
			p.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

			for _, f := range p.Files {
				if !f.Generate {
					continue
				}
				generate(p, f)
			}

			return nil
		},
	)
}

func generate(p *protogen.Plugin, f *protogen.File) {
	if len(f.Services) != 1 {
		return
	}

	service := f.Services[0]
	descName := service.GoName + "ServiceDesc"

	g := p.NewGeneratedFile(f.GeneratedFilenamePrefix+".pb.goclay.go", f.GoImportPath)
	g.P("// Code generated by protoc-gen-goclay. DO NOT EDIT.")
	g.P()
	g.P("package ", f.GoPackageName)
	g.P()
	g.Import(embedPackage)
	g.P()
	g.P("//go:embed ", trimPathAndExt(f.Proto.GetName()), ".swagger.json")
	g.P("var Swagger []byte")
	g.P()
	g.P("// ", descName, " is a descriptor/registrator for the ", service.GoName, "Server.")
	g.P("type ", descName, " struct {")
	g.P("svc ", service.GoName, "Server")
	g.P("opts ", httptransportPackage.Ident("DescOptions"))
	g.P("}")
	g.P()
	g.P("// New", descName, " creates new registrator for the "+service.GoName+"Server.")
	g.P("// It implements httptransport.ConfigurableServiceDesc as well.")
	g.P("func New", descName, "(i ", service.GoName, "Server) ", "*", descName, " {")
	g.P("return &", descName, "{svc: i}")
	g.P("}")
	g.P()
	g.P("// RegisterGRPC implements service registrator interface.")
	g.P("func(d *", descName, ") RegisterGRPC(s *", g.QualifiedGoIdent(grpcPackage.Ident("Server")), ") {")
	g.P("Register", service.GoName, "Server(s, d.svc)")
	g.P("}")
	g.P()
	g.P("// Apply applies passed options.")
	g.P("func(d *", descName, ") Apply(oo ...", transportPackage.Ident("DescOption"), ") {")
	g.P("for _, o := range oo {")
	g.P("o.Apply(&d.opts)")
	g.P("}")
	g.P("}")
	g.P()
	g.P("// SwaggerDef returns this file's Swagger definition.")
	g.P("func(d *", descName, ") SwaggerDef(options ...", swaggerPackage.Ident("Option"), ") []byte {")
	g.P(`return Swagger`)
	g.P("}")
	g.P()
	g.P("// RegisterHTTP registers this service's HTTP handlers/bindings.")
	g.P("func(d *", descName, ") RegisterHTTP(mux ", transportPackage.Ident("Router"), ") {")
	g.P("ctx := ", contextPackage.Ident("Background"), "()")
	g.P("err := Register", service.GoName, "HandlerServer(ctx, mux, d.svc)")
	g.P("if err != nil {")
	g.P("panic(err)")
	g.P("}")
	g.P("}")
}

func trimPathAndExt(fName string) string {
	f := filepath.Base(fName)
	ext := filepath.Ext(f)
	return f[:len(f)-len(ext)]
}
