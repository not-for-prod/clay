// Code generated by protoc-gen-goclay. DO NOT EDIT.

package example

import (
	context "context"
	_ "embed"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	transport "github.com/not-for-prod/clay/transport"
	httptransport "github.com/not-for-prod/clay/transport/httptransport"
	grpc "google.golang.org/grpc"
)

//go:embed sum.swagger.json
var Swagger []byte

// SummatorServiceDesc is a descriptor/registrator for the SummatorServer.
type SummatorServiceDesc struct {
	svc  SummatorServer
	opts httptransport.DescOptions
}

// NewSummatorServiceDesc creates new registrator for the SummatorServer.
// It implements httptransport.ConfigurableServiceDesc as well.
func NewSummatorServiceDesc(i SummatorServer) *SummatorServiceDesc {
	return &SummatorServiceDesc{svc: i}
}

// RegisterGRPC implements service registrator interface.
func (d *SummatorServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterSummatorServer(s, d.svc)
}

// Apply applies passed options.
func (d *SummatorServiceDesc) Apply(oo ...transport.DescOption) {
	for _, o := range oo {
		o.Apply(&d.opts)
	}
}

// SwaggerDef returns this file's Swagger definition.
func (d *SummatorServiceDesc) SwaggerDef() []byte {
	return Swagger
}

// RegisterHTTP registers this service's HTTP handlers/bindings.
func (w *SummatorServiceDesc) RegisterHTTP(
	ctx context.Context,
	mux *runtime.ServeMux,
) error {
	return RegisterSummatorHandlerServer(ctx, mux, w)
}

// Wrap all http methods with interceptor support

func (w *SummatorServiceDesc) Sum(ctx context.Context, in *SumRequest) (*SumResponse, error) {
	if w.opts.UnaryInterceptor == nil {
		return w.svc.Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     w,
		FullMethod: "/sumpb.Summator/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return w.svc.Sum(ctx, req.(*SumRequest))
	}
	resp, err := w.opts.UnaryInterceptor(ctx, in, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*SumResponse), err
}
